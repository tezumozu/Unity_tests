@startuml 自機周りクラス設計
    class Player <MonoBehaviour>{ 
        PlayerManager playerManager
    }


    class PlayerManager {
        + PlayerStatus status
        + void playerDamaged(int damage)
    }


    class PlayerStateManager {
        - GravityManager gravityManager
        - E_ActionState currentState
        - Dictionary<E_Actionstate,PlayerActionState> stateList

        + void playerDamaged()
    }


    class GravityManager{
        float gravityAccel
        float currentGravityAccel

        + Vector2 addGravity()
        + void resetGravity()
        + float getCurrentGravityAccel()
    }


    struct PlayerStatus {
        + int maxHp
        + int currentHp
    }


    interface I_2DPlayerUpdatable{
        + void playerUpdate()
        + void setPos(Vector2 vec)
        + void setRotate(float rtate)
        + void setAnimState(E_ActionState state)
        + bool isLanding()
    }


    abstract PlayerActionState{
        #InputManager inputManager

        + void stateUpdate()
        + void stateInit()
        + void stateStart()
        + void stateEnd()
        + void checkInput()
        - void checInputkBuffer()
    }


    class PlayerAction_Wait{
        
    }

    Class PlayerAction_Jump{

    }

    Class PlayerAction_Walk{

    }

    Class InputManager <SingletonMono>{
        - Dictionary <E_InputType,InputData> inputDataDic
        - List<InputData> inputBuffer
        + InputData[] getInputBuffer()
        + List<InputData> getInputData()
    }

    enum E_ActionState{
        WALK
        WAIT
        JUMP
        ……
    }

    enum E_AnimState{
        REDY
        ACTION
        FOLLOW_THROUGH
        LOOP
    }

    Player .right.|> I_2DPlayerUpdatable
    PlayerManager *-up- PlayerStatus
    PlayerManager *-right-> PlayerStateManager
    PlayerManager ..> I_2DPlayerUpdatable

    PlayerStateManager ..> I_2DPlayerUpdatable
    PlayerStateManager -right-> InputManager

    PlayerStateManager "1" *-right- "1" GravityManager
    PlayerActionState "1…*" *-right- "1" GravityManager
    PlayerActionState <-up-o PlayerStateManager

    PlayerAction_Jump -up-|> PlayerActionState
    PlayerAction_Wait -up-|> PlayerActionState
    PlayerAction_Walk -up-|> PlayerActionState

    Player .up.> PlayerManager

@enduml