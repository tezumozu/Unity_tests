@startuml 自機周りクラス設計
    class Player <Mono>{
        Dictionary <E_ActionState,ActionState> actionList
        E_ActionState currentState
        void objectUpdate()
        void init()
    }

    abstract ActionState{
        # static bool isAir
        # staic bool isMove
        # static InputManager inputManager
        # E_AnimState currentAnimState
        + E_ActionState actionUpdate()
        + E_ActionState checkInput()
    }

    class Action_Wait{
        
    }

    Class Action_Jump{

    }

    Class Action_Walk{

    }

    Class InputManager <SingletonMono>{
        - Dictionary <E_InputType,InputData> inputDataDic
        - List<InputData> inputBuffer
        + InputData[] getInputBuffer()
        + List<InputData> getInputData()
    }

    enum E_ActionState{
        WALK
        WAIT
        JUMP
        ……
    }

    enum E_AnimState{
        REDY
        ACTION
        FOLLOW_THROUGH
        LOOP
    }

    Player "1" o--> "1..*" ActionState
    Action_Jump -up-|> ActionState
    Action_Wait -up-|> ActionState
    Action_Walk -up-|> ActionState

    ActionState "1" *-right-> "1" InputManager
@enduml