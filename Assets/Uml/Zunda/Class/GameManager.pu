@startuml ゲーマネージャ
class GameManager <<SingletonMonobehaviour>>{
    - UniTask initAsync
    - E_GameScene currentScene
    - Dictionary<E_GameScene,SceneObjectManager> secneManagerList
    - E_GameState currentGameState
    - InputManager inputManager
    - SceneLoader sceneLoader

    - void Start()
    - void Update()
    + override void OnInitialize()

}

abstract class SceneObjectManager{
    - List<InputMode> InputModeList
    -List<I_ObjectUpdatable> objectList
    -List<I_ObjectUpdatable> managerList
    -List<I_ObjectUpdatable> UIList
    + bool IsFinished {get; protected set;}
    + E_GameScene GetNextScene {get; protected set;}

    + abstract void ObjectInit()
    + abstract void ObjectRelease()
    + abstract void ManagerUpdate(InputData[] inputs)
    + abstract void UIUpdate();

    + virtual void PlayerUpdate(InputData[] inputs)
    + virtual void ObjectUpdate()
    + virtual void SetLoadingActive(bool flag)
}

class hogehogeSceneManager{
    - List<InputMode> InputModeList
    - ist<I_ObjectUpdatable> objectList
    - List<I_ObjectUpdatable> managerList
    - List<I_ObjectUpdatable> UIList
    + bool IsFinished {get; protected set;}
    + E_GameScene GetNextScene {get; protected set;}

    + void ObjectInit()
    + void ObjectRelease()
    + void ManagerUpdate(InputData[] inputs)
    + void UIUpdate()

    + void PlayerUpdate(InputData[] inputs)
    + void ObjectUpdate()
    + void SetLoadingActive(bool flag)

}

interface I_ObjectUpdatable {
    + void ObjectUpdate ()
    + void ObjectInit ()
}

class SceneLoader{
    - static Subject<E_Scene> sceneSubject

    + static void SubscriveManager(Action method)
    + IEnumerator loadScene()
}

enum E_GameScene{

}

enum E_GameState{

}


GameManager *--> SceneLoader : Obseveb
GameManager o-right-> SceneObjectManager : Update
SceneObjectManager o--> I_ObjectUpdatable
hogehogeSceneManager <|-left- I_ObjectUpdatable
@enduml