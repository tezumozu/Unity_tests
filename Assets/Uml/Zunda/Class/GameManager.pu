@startuml ゲーマネージャ
class GameLoopManager <<MonoSingleton>>{
    - void E_LoopState
    - UniTask initAsync
    - Dictionary <E_SceneName,GameModeManager> GameModeManagerDic
    - E_SceneName currentScene
    - private SceneLoader sceneLoader
    - void Stat()
    - void Updata()
    + void override OnInitialize()

    - enum E_LoopState { INIT , UPDATE , EXIT , QUIT }
}


abstract GameModeManager {
    + GameMode GetCurrentGameMode { get; }
    + Dictionary <E_GameMode,GameMode> GameModeDic
    + E_GameMode currentGameMode

    + virtual void ObjectRelease()
    + virtual void ObjectInit()
}

interface I_GameManagerUpdatable{
    + abstract UpdataObject()
    + abstract ObjectRelease()
    + abstract ObjectInit()
}

abstract GameMode {
    + GameManager GameManager {get; protected set;}

    + UpdataObject()
    + ObjectRelease()
    + ObjectInit()
    # ObserveGameModeChangeAlert(E_GameMode nextScene)
}

interface I_LoadSceneAlertable {
    + ObserveLoadSceneAlert(Action method)
}

interface I_GameModeChangeAlertable {
    + GameModeChangeAlert(Action method)
}

abstract class GameManager{

}

GameLoopManager --> I_GameManagerUpdatable
GameLoopManager o--> GameModeManager
GameLoopManager -right-> I_LoadSceneAlertable
GameModeManager *-right- GameMode
GameManager -up-|> I_LoadSceneAlertable
GameMode -up-|> I_GameManagerUpdatable
GameMode *-right-> GameManager
GameManager --|> I_GameModeChangeAlertable
GameModeManager --> I_GameModeChangeAlertable
 

@enduml