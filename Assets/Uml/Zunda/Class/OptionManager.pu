@startuml オプション周りのクラス設計

    class OptionManager {
        - I_OptionUIUpdatable optionUIManager

        + OptionManager (I_OptionUIUpdatable UIManager)
        + UpdataManager (InputData[] input)
    }

    interface I_OptionUIUpdatable{
        + void UpdataItem(InputData[])
        + void CangePage(InputData[])
        + void getOptionData()
        + void setOptionData()

    }

    class OptionUIManager {
        + void UpdataItem(InputData[])
        + void CangePage(InputData[])
        + void getOptionData()
        + void setOptionData()
    }


    class OptionLoder{
        + Dictionary<E_OptionItem,int> LoadOption()
        + void SaveOption()
    }


    class OptionPage {
        - int currentIndex
        - bool isActive
        - Subject<bool> IsActiveSubject
        - Dictionary<E_OptionItem,OptionItem> OptionData

        + void SubscriveIsActive (Actin<bool> method)
        + void UpdateItem(InputData[] input)
        + void SetActive(bool flagh)
        + void SetValues(Dictionary<E_OptionItem,int> dataDic)
    }

    class OptionItem <<MonoBehaviour>>{
        - static Dictionary<E_OptionItem,String> ItemNameDic 
        + E_OptionItem OwnItem {get; private set;}
        + int Value {get; private set;}
        + void UpdateVulue(InputData[] input)
    }

    class GameMode{

    }

    enum E_OptionItem{
        SE,
        BGM,
        VOISE,
        CONTOROLE
    }

    enum E_OptionPage{
        DEFAULT
    }

    OptionLoder *-right-> OptionManager
    GameMode *--> OptionManager : injection Object
    OptionManager *--> I_OptionUIUpdatable
    I_OptionUIUpdatable <|-right-> OptionUIManager
    OptionUIManager o--> OptionPage
    OptionPage o--> OptionItem 
@enduml