@startuml ダメージ周りのクラス設計
    interface I_DamageApplicableObject{
        # void damageApplicable()
    }

    interface I_P_DamageApplicableObject{
        # void damageApplicable()
    }

    interface I_E_DamageApplicableObject{
        # void damageApplicable()
    }

    class Player{

    }

    class Enemy{

    }

    class PlayerAttackEffect {

    }

    class DamageWall{

    }

    class EnemyAttackEffect{

    }

    interface I_DamageInflict {
        + void damageInflict( I_DamageApplicableObject obj)
    }

    interface I_ToPlayerDamageInflict {
        + void damageInflict( I_P_DamageApplicableObject obj)
    }

    interface I_ToEnemyDamageInflict {
        + void damageInflict( I_E_Enemy obj)
    }



    I_P_DamageApplicableObject  -up-o  I_DamageApplicableObject
    I_E_DamageApplicableObject  -up-o  I_DamageApplicableObject

    I_P_DamageApplicableObject <.. I_DamageInflict
    I_P_DamageApplicableObject <.. I_ToPlayerDamageInflict
    I_E_DamageApplicableObject <.. I_DamageInflict
    I_E_DamageApplicableObject <.. I_ToEnemyDamageInflict

    Player  --o  I_P_DamageApplicableObject
    Enemy  --o  I_E_DamageApplicableObject

    PlayerAttackEffect .up.|> I_ToEnemyDamageInflict
    DamageWall .up.|> I_DamageInflict
    EnemyAttackEffect .up.|> I_ToPlayerDamageInflict
@enduml