@startuml 自機周りクラス設計
    class Player <MonoBehaviour>{ 
        PlayerManager playerManager
    }


    class PlayerManager {
        + PlayerStatus status
        + void playerDamaged(int damage)
    }


    class PlayerStateManager {
        - GravityManager gravityManager
        - E_ActionState currentState
        - Dictionary<E_Actionstate,PlayerActionState> stateList

        + void playerDamaged()
    }


    class GravityManager{
        float gravityAccel
        float currentGravityAccel

        + Vector2 addGravity()
        + void resetGravity()
        + float getCurrentGravityAccel()
    }


    interface I_2DPlayerUpdatable{
        + void playerUpdate()
        + void setPos(Vector2 vec)
        + void setRotate(float rtate)
        + void setAnimState(E_ActionState state)
        + bool isLanding()
    }


    abstract PlayerActionState{
        + void stateUpdate()
        + void stateEnter()
        + void stateExit()
        + void checkInput()
    }

    abstract PlayerUpActionState{
    }

    abstract PlayerBottomActionState{
    }


    Class InputManager <SingletonMono>{
        - Dictionary <E_InputType,InputData> inputDataDic
        - List<InputData> inputBuffer
        + InputData[] getInputBuffer()
        + List<InputData> getInputData()
    }

    

    Player .right.|> I_2DPlayerUpdatable
    PlayerActionState *.left.> I_2DPlayerUpdatable

    PlayerActionState <|-up- PlayerUpActionState
    PlayerActionState <|-up- PlayerBottomActionState
    PlayerActionState *--> GravityManager

    PlayerStateManager o-- PlayerUpActionState
    PlayerStateManager o-- PlayerBottomActionState

    PlayerManager *-down-> PlayerStateManager

    PlayerStateManager -right-> InputManager





@enduml